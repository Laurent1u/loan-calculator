{"version":3,"sources":["components/Calculator.js","components/Form.js","components/Input.js","components/ResultContainer.js","App.js","serviceWorker.js","index.js"],"names":["Calculator","props","id","children","Form","onSubmit","e","preventDefault","submitFunction","Input","label","type","identifier","updateStateFunction","htmlFor","name","onChange","target","value","ResultContainer","App","useState","amount","interest","years","loanTerms","setLoanTerms","monthlyPayment","totalPayment","totalInterest","isValid","calculateLoan","setCalculateLoan","error","setError","updateLoanTerms","dataObj","key","Object","keys","values","isFormValid","errorString","isNaN","Number","style","color","fontWeight","fontSize","clientAmount","calculateInterest","calculatePayments","rate","Math","pow","monthly","isFinite","monthlyPaymentCalculated","toFixed","totalPaymentCalculated","totalInterestCalculated","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","querySelector","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"6QAaeA,G,MAXI,SAACC,GAChB,OACI,yBAAKC,GAAG,cACJ,gCACI,gDAEHD,EAAME,YCOJC,EAbF,SAACH,GAMV,OACI,0BAAMI,SANe,SAAAC,GACrBA,EAAEC,iBACFN,EAAMO,mBAKDP,EAAME,WCSJM,EAjBD,SAAC,GAAsD,IAApDC,EAAmD,EAAnDA,MAAOC,EAA4C,EAA5CA,KAAMC,EAAsC,EAAtCA,WAAYC,EAA0B,EAA1BA,oBAStC,OACI,6BACI,2BAAOC,QAASF,GAAaF,GAC7B,2BAAOC,KAAMA,EAAMI,KAAMH,EAAYV,GAAIU,EAAYI,SAXxC,SAAAV,GAAM,IAAD,EACAA,EAAEW,OAAjBF,EADe,EACfA,KAAMG,EADS,EACTA,MAEbL,EAAoB,eACfE,EAAOG,SCGLC,EARS,SAAClB,GACrB,OACI,yBAAKC,GAAG,UACHD,EAAME,WCuHJiB,MAnHf,WAAgB,IAAD,EACqBC,mBAAS,CACzCC,OAAQ,GACRC,SAAU,GACVC,MAAO,KAJI,mBACNC,EADM,KACKC,EADL,OAM6BL,mBAAS,CACjDM,eAAgB,GAChBC,aAAc,GACdC,cAAe,GACfC,SAAS,IAVE,mBAMNC,EANM,KAMSC,EANT,OAYaX,mBAAS,IAZtB,mBAYNY,EAZM,KAYCC,EAZD,KAePC,EAAkB,SAAAC,GACtB,IAAMC,EAAMC,OAAOC,KAAKH,GAAS,GAC3BlB,EAAQoB,OAAOE,OAAOJ,GAAS,GAErCV,EAAa,2BAAID,GAAL,kBAAiBY,EAAMnB,MA8B/BuB,EAAc,WAAO,IAClBnB,EAA2BG,EAA3BH,OAAQC,EAAmBE,EAAnBF,SAAUC,EAASC,EAATD,MACrBkB,EAAc,GAUlB,OARIpB,GAAWC,GAAaC,EAElBmB,MAAMrB,IAAWqB,MAAMpB,IAAaoB,MAAMnB,GAClDkB,EAAc,4CACLE,OAAOtB,IAAW,GAAKsB,OAAOrB,IAAa,GAAKqB,OAAOpB,IAAU,KAC1EkB,EAAc,+CAJdA,EAAc,iCAOZA,IACFR,EAASQ,IACF,IAKX,OACI,kBAAC,EAAD,KACE,uBAAGG,MAAO,CAACC,MAAO,QAASC,WAAY,OAAQC,SAAU,SAAUf,GACnE,kBAAC,EAAD,CAAMzB,eAjDgB,WAC1B,IAAIiC,IACF,OAAO,EAGT,IAAMQ,EAAeL,OAAOnB,EAAUH,QAChC4B,EAAoBN,OAAOnB,EAAUF,UAAY,IAAM,GACvD4B,EAA8C,GAA1BP,OAAOnB,EAAUD,OACrC4B,EAAOC,KAAKC,IAAI,EAAIJ,EAAmBC,GACvCI,EAAWN,EAAeG,EAAOF,GAAsBE,EAAO,GAEpE,GAAGI,SAASD,GAAU,CACpB,IAAME,EAA2BF,EAAQG,QAAQ,GAC3CC,GAA0BJ,EAAUJ,GAAmBO,QAAQ,GAC/DE,GAA2BL,EAAUJ,EAAoBF,GAAcS,QAAQ,GAGrF1B,EAAiB,CACfL,eAAgB8B,EAChB7B,aAAc+B,EACd9B,cAAe+B,EACf9B,SAAS,OA6BP,kBAAC,EAAD,CACEpB,MAAM,UACNC,KAAK,OACLC,WAAW,SACXC,oBAAqBsB,IAEvB,kBAAC,EAAD,CACEzB,MAAM,WACNC,KAAK,OACLC,WAAW,WACXC,oBAAqBsB,IAGvB,kBAAC,EAAD,CACEzB,MAAM,SACNC,KAAK,OACLC,WAAW,QACXC,oBAAqBsB,IAGvB,kBAAC,EAAD,CACExB,KAAK,YAIRoB,EAAcD,QACb,kBAAC,EAAD,KACE,6BACE,6CAAsB,+BAAKL,EAAUH,QACrC,8CAAuB,2BAAIG,EAAUF,SAAd,KACvB,8CAAuB,2BAAIE,EAAUD,QAEvC,6BACE,iDAA0B,2BAAIO,EAAcJ,gBAC5C,+CAAwB,2BAAII,EAAcH,cAC1C,+CAAwB,2BAAIG,EAAcF,iBAG5C,KC3GQgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,cAAc,eDyHnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA5C,GACL6C,QAAQ7C,MAAMA,EAAM8C,c","file":"static/js/main.84c3e4ee.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Calculator = (props) => {\r\n    return (\r\n        <div id=\"calculator\">\r\n            <header>\r\n                <h1>Loan Calculator</h1>\r\n            </header>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Calculator;","import React, { useState } from 'react';\r\n\r\nconst Form = (props) => {\r\n    const handleSubmitForm = e => {\r\n        e.preventDefault();\r\n        props.submitFunction();\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmitForm}>\r\n            {props.children}\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default Form;","import React from 'react'\r\n\r\nconst Input = ({ label, type, identifier, updateStateFunction }) => {\r\n    const inputHandler = e => {\r\n        const {name, value} = e.target\r\n\r\n        updateStateFunction({\r\n            [name]: value\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <label htmlFor={identifier}>{label}</label>\r\n            <input type={type} name={identifier} id={identifier} onChange={inputHandler} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Input","import React from 'react'\r\n\r\nconst ResultContainer = (props) => {\r\n    return (\r\n        <div id=\"result\">\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ResultContainer;","import React, { useState } from 'react';\nimport './App.css';\n\n// import custom components\nimport Calculator from './components/Calculator';\nimport Form from './components/Form'\nimport Input from './components/Input'\nimport ResultContainer from './components/ResultContainer';\n\nfunction App() {\n  const [loanTerms, setLoanTerms] = useState({\n    amount: '',\n    interest: '',\n    years: ''\n  });\n  const [calculateLoan, setCalculateLoan] = useState({\n    monthlyPayment: '',\n    totalPayment: '',\n    totalInterest: '',\n    isValid: false\n  })\n  const [error, setError] = useState('');\n\n\n  const updateLoanTerms = dataObj => {\n    const key = Object.keys(dataObj)[0]\n    const value = Object.values(dataObj)[0]\n\n    setLoanTerms({...loanTerms, [key]: value})\n  }\n\n  const calculateClientLoan = () => {\n    if(!isFormValid()) {\n      return false;\n    }\n\n    const clientAmount = Number(loanTerms.amount)\n    const calculateInterest = Number(loanTerms.interest) / 100 / 12\n    const calculatePayments = Number(loanTerms.years) * 12\n    const rate = Math.pow(1 + calculateInterest, calculatePayments)\n    const monthly = (clientAmount * rate * calculateInterest) / (rate - 1)\n    \n    if(isFinite(monthly)) {\n      const monthlyPaymentCalculated = monthly.toFixed(2)\n      const totalPaymentCalculated = (monthly * calculatePayments).toFixed(2)\n      const totalInterestCalculated = (monthly * calculatePayments - clientAmount).toFixed(2)\n\n      // set up results to the state to be displayed to the client\n      setCalculateLoan({\n        monthlyPayment: monthlyPaymentCalculated,\n        totalPayment: totalPaymentCalculated,\n        totalInterest: totalInterestCalculated,\n        isValid: true\n      })\n    }\n    return\n  }\n\n  const isFormValid = () => {\n    const {amount, interest, years} = loanTerms;\n    let errorString = '';\n\n    if(!amount || !interest || !years) {\n      errorString = \"All this value are required !\";\n    } else if(isNaN(amount) || isNaN(interest) || isNaN(years)) {\n      errorString = \"All this values must be a valid number !\";\n    } else if (Number(amount) <= 0 || Number(interest) <= 0 || Number(years) <= 0) {\n      errorString = \"All this values must be a positive number !\";\n    }\n\n    if (errorString) {\n      setError(errorString);\n      return false;\n    }\n    return true;\n  }\n\n  return (\n      <Calculator>\n        <p style={{color: 'white', fontWeight: 'bold', fontSize: '16px'}}>{error}</p>\n        <Form submitFunction={calculateClientLoan}>\n          <Input\n            label=\"Amount:\"\n            type=\"text\"\n            identifier=\"amount\"\n            updateStateFunction={updateLoanTerms}\n            />\n          <Input\n            label=\"Percent:\"\n            type=\"text\"\n            identifier=\"interest\"\n            updateStateFunction={updateLoanTerms}\n            />\n\n          <Input \n            label=\"Years:\"\n            type=\"text\"\n            identifier=\"years\"\n            updateStateFunction={updateLoanTerms}\n            />\n\n          <Input \n            type=\"submit\"\n            />\n        </Form>\n\n        {calculateLoan.isValid ? (\n          <ResultContainer>\n            <div>\n              <h4>Loan Amount: </h4><p>${loanTerms.amount}</p>\n              <h4>Loan Percent: </h4><p>{loanTerms.interest}%</p>\n              <h4>Years To Pay: </h4><p>{loanTerms.years}</p>\n            </div>\n            <div>\n              <h4>Monthly Payment: </h4><p>{calculateLoan.monthlyPayment}</p>\n              <h4>Total Payment: </h4><p>{calculateLoan.totalPayment}</p>\n              <h4>Total Percent: </h4><p>{calculateLoan.totalInterest}</p>\n            </div>\n          </ResultContainer>\n        ) : ''}\n      </Calculator>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.querySelector('#container')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}